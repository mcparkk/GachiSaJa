/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-04-18 03:27:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.ggoreb.kakao_api.TranslateUtil;

public final class trans_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.ggoreb.kakao_api.TranslateUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("utf-8");
	String query = request.getParameter("query");
	if(query == null) {
		// 처음 페이지를 호출한 상태
		out.println("처음");
	} else {
		// 번역할 문장을 넘겨준 상태
		out.println(query);
		TranslateUtil util = 
			new TranslateUtil("0a7c5408897da72ef62213f279237f86");
		String result = util.sendText("kr", "jp", query);
		out.println(result);

      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tvar result = '");
      out.print(result);
      out.write("';\r\n");
      out.write("\t\t// alert(result);\r\n");
      out.write("\t\tresult = JSON.parse(result);\r\n");
      out.write("\t\ttranslated_text = result.translated_text; // array\r\n");
      out.write("\t\tt2 = translated_text[0]; // array\r\n");
      out.write("\t\tvar re = t2[0];\r\n");
      out.write("\t\talert(re);\r\n");
      out.write("\t</script>\r\n");
		
	}

      out.write("\r\n");
      out.write("<form method=\"post\" action=\"trans.jsp\">\r\n");
      out.write("\t<input type=\"text\" id=\"address\" name=\"query\">\r\n");
      out.write("\t<button type=\"submit\">지도 보기</button>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-3.1.1.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction move() {\r\n");
      out.write("\t\taddress = $(\"#address\").val();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.ajax( { \r\n");
      out.write("\t\t\turl: 'https://kapi.kakao.com/v1/translation/translate',\r\n");
      out.write("\t\t\ttype: 'get',\r\n");
      out.write("\t\t\tbeforeSend : function(xhr){\r\n");
      out.write("\t            xhr.setRequestHeader(\"Authorization\", \"KakaoAK 0a7c5408897da72ef62213f279237f86\");\r\n");
      out.write("\t        },\r\n");
      out.write("\t\t\tdata: { \r\n");
      out.write("\t\t\t\t\"src_lang\" : \"kr\", \r\n");
      out.write("\t\t\t\t\"target_lang\" : \"jp\",\r\n");
      out.write("\t\t\t\t\"query\" : address\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tsuccess: function(result) {\r\n");
      out.write("\t\t\t\tdocuments = result.documents;\r\n");
      out.write("\t\t\t\tdoc = documents[0];\r\n");
      out.write("\t\t\t\troad_address = doc.road_address;\r\n");
      out.write("\t\t\t\tx = road_address.x;\r\n");
      out.write("\t\t\t\ty = road_address.y;\r\n");
      out.write("\t\t\t\tconsole.log(x, y);\r\n");
      out.write("\t\t\t\tmap(y, x);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t} );\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction map(y, x) {\r\n");
      out.write("\t\tvar container = document.getElementById('map'); //지도를 담을 영역의 DOM 레퍼런스\r\n");
      out.write("\t\tvar options = { //지도를 생성할 때 필요한 기본 옵션\r\n");
      out.write("\t\t\tcenter: new daum.maps.LatLng(y, x), //지도의 중심좌표.\r\n");
      out.write("\t\t\tlevel: 3 //지도의 레벨(확대, 축소 정도)\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tvar map = new daum.maps.Map(container, options); //지도 생성 및 객체 리턴\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 마커가 표시될 위치입니다 \r\n");
      out.write("\t\tvar markerPosition  = new daum.maps.LatLng(y, x); \r\n");
      out.write("\t\t// 마커를 생성합니다\r\n");
      out.write("\t\tvar marker = new daum.maps.Marker({\r\n");
      out.write("\t\t    position: markerPosition\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t// 마커가 지도 위에 표시되도록 설정합니다\r\n");
      out.write("\t\tmarker.setMap(map);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
